---
Resources:
  CustomersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
      TableName: "Customers"

  TransactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "accountId"
          AttributeType: "S"
        - AttributeName: "submittedDateTime"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "accountId"
          KeyType: "HASH"
        - AttributeName: "submittedDateTime"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      TableName: "Transactions"

  sTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "targetCustomerId"
          AttributeType: "N"
        - AttributeName: "submittedDateTime"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "targetCustomerId"
          KeyType: "HASH"
        - AttributeName: "submittedDateTime"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      TableName: "PeerToPeerTransfers"

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "*"

  PopulateTables:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: nodejs18.x
      Code:
        S3Bucket: projectkitty
        S3Key: "populateTables.zip"
      Timeout: 60

  RunPopulateTables:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - CustomersTable
      - TransactionsTable
    Properties:
      ServiceToken:
        Fn::GetAtt: [ PopulateTables , "Arn" ]

  EmptyTables:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: nodejs18.x
      Code:
        S3Bucket: projectkitty
        S3Key: "emptyTables.zip"
      Timeout: 60

  GetCustomersLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: michaelpotocar.projectkitty.providers.GetCustomersProvider::handleRequest
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: java11
      Code:
        S3Bucket: projectkitty
        S3Key: "lambda-1.0-SNAPSHOT.zip"
      MemorySize: 256
      Timeout: 60

  GetCustomersLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName:
        Ref: GetCustomersLambda

  GetCustomersLambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName:
        Ref: GetCustomersLambda
      FunctionVersion:
        Fn::GetAtt: [ GetCustomersLambdaVersion, Version ]
      Name: prod
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      
  GetCustomersPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: GetCustomersLambdaAlias
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"

  GetCustomerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: michaelpotocar.projectkitty.providers.GetCustomerProvider::handleRequest
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: java11
      Code:
        S3Bucket: projectkitty
        S3Key: "lambda-1.0-SNAPSHOT.zip"
      MemorySize: 256
      Timeout: 60

  GetCustomerLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName:
        Ref: GetCustomerLambda

  GetCustomerLambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName:
        Ref: GetCustomerLambda
      FunctionVersion:
        Fn::GetAtt: [ GetCustomerLambdaVersion, Version ]
      Name: prod
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1

  GetCustomerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: GetCustomerLambdaAlias
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"

  GetCustomerAccountsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: michaelpotocar.projectkitty.providers.GetCustomerAccountsProvider::handleRequest
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: java11
      Code:
        S3Bucket: projectkitty
        S3Key: "lambda-1.0-SNAPSHOT.zip"
      MemorySize: 256
      Timeout: 60

  GetCustomerAccountsLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName:
        Ref: GetCustomerAccountsLambda

  GetCustomerAccountsLambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName:
        Ref: GetCustomerAccountsLambda
      FunctionVersion:
        Fn::GetAtt: [ GetCustomerAccountsLambdaVersion, Version ]
      Name: prod
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1

  GetCustomerAccountsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: GetCustomerAccountsLambdaAlias
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"

  GetCustomerAccountLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: michaelpotocar.projectkitty.providers.GetCustomerAccountProvider::handleRequest
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: java11
      Code:
        S3Bucket: projectkitty
        S3Key: "lambda-1.0-SNAPSHOT.zip"
      MemorySize: 256
      Timeout: 60

  GetCustomerAccountLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName:
        Ref: GetCustomerAccountLambda

  GetCustomerAccountLambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName:
        Ref: GetCustomerAccountLambda
      FunctionVersion:
        Fn::GetAtt: [ GetCustomerAccountLambdaVersion, Version ]
      Name: prod
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1

  GetCustomerAccountPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: GetCustomerAccountLambdaAlias
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"

  GetAccountTransactionsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: michaelpotocar.projectkitty.providers.GetAccountTransactionsProvider::handleRequest
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: java11
      Code:
        S3Bucket: projectkitty
        S3Key: "lambda-1.0-SNAPSHOT.zip"
      MemorySize: 256
      Timeout: 60

  GetAccountTransactionsLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName:
        Ref: GetAccountTransactionsLambda

  GetAccountTransactionsLambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName:
        Ref: GetAccountTransactionsLambda
      FunctionVersion:
        Fn::GetAtt: [ GetAccountTransactionsLambdaVersion, Version ]
      Name: prod
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1

  GetAccountTransactionsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: GetAccountTransactionsLambdaAlias
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"

  PostCreateAccountLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: michaelpotocar.projectkitty.providers.PostCreateAccountProvider::handleRequest
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: java11
      Code:
        S3Bucket: projectkitty
        S3Key: "lambda-1.0-SNAPSHOT.zip"
      MemorySize: 256
      Timeout: 60

  PostCreateAccountLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName:
        Ref: PostCreateAccountLambda

  PostCreateAccountLambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName:
        Ref: PostCreateAccountLambda
      FunctionVersion:
        Fn::GetAtt: [ PostCreateAccountLambdaVersion, Version ]
      Name: prod
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1

  PostCreateAccountPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: PostCreateAccountLambdaAlias
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"

  PostTransferLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: michaelpotocar.projectkitty.providers.PostTransferProvider::handleRequest
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: java11
      Code:
        S3Bucket: projectkitty
        S3Key: "lambda-1.0-SNAPSHOT.zip"
      MemorySize: 256
      Timeout: 60

  PostTransferLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName:
        Ref: PostTransferLambda

  PostTransferLambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName:
        Ref: PostTransferLambda
      FunctionVersion:
        Fn::GetAtt: [ PostTransferLambdaVersion, Version ]
      Name: prod
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1

  PostTransferPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: PostTransferLambdaAlias
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: ApiGateway
      StageName: prod

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ProjectKitty
      Body:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: s3://projectkitty/swagger.yaml

  GetPendingPeerToPeerTransfersLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: michaelpotocar.projectkitty.providers.GetPendingPeerToPeerTransfersProvider::handleRequest
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: java11
      Code:
        S3Bucket: projectkitty
        S3Key: "lambda-1.0-SNAPSHOT.zip"
      MemorySize: 256
      Timeout: 60

  GetPendingPeerToPeerTransfersLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName:
        Ref: GetPendingPeerToPeerTransfersLambda

  GetPendingPeerToPeerTransfersLambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName:
        Ref: GetPendingPeerToPeerTransfersLambda
      FunctionVersion:
        Fn::GetAtt: [ GetPendingPeerToPeerTransfersLambdaVersion, Version ]
      Name: prod
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1

  GetPendingPeerToPeerTransfersPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: GetPendingPeerToPeerTransfersLambdaAlias
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"

  PutPendingPeerToPeerTransferLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: michaelpotocar.projectkitty.providers.PutPendingPeerToPeerTransferProvider::handleRequest
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: java11
      Code:
        S3Bucket: projectkitty
        S3Key: "lambda-1.0-SNAPSHOT.zip"
      MemorySize: 256
      Timeout: 60

  PutPendingPeerToPeerTransferLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName:
        Ref: PutPendingPeerToPeerTransferLambda

  PutPendingPeerToPeerTransferLambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName:
        Ref: PutPendingPeerToPeerTransferLambda
      FunctionVersion:
        Fn::GetAtt: [ PutPendingPeerToPeerTransferLambdaVersion, Version ]
      Name: prod
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1

  PutPendingPeerToPeerTransferPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: PutPendingPeerToPeerTransferLambdaAlias
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"
