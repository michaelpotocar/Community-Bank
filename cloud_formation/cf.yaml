---
Resources:
  CustomersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
      TableName: "Customers"

  AccountsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "accountNumber"
          AttributeType: "N"
        - AttributeName: "routingNumber"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "accountNumber"
          KeyType: "HASH"
        - AttributeName: "routingNumber"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      TableName: "Accounts"

  TransactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "accountNumber"
          AttributeType: "N"
        - AttributeName: "submittedDateTime"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "accountNumber"
          KeyType: "HASH"
        - AttributeName: "submittedDateTime"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      TableName: "Transactions"

  PeerToPeerTransactionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "sourceCustomerID"
          AttributeType: "N"
        - AttributeName: "destinationCustomerID"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "sourceCustomerID"
          KeyType: "HASH"
        - AttributeName: "destinationCustomerID"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
      TableName: "PeerToPeerTransactions"

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "*"

  PopulateTables:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: nodejs18.x
      Code:
        S3Bucket: projectkitty
        S3Key: "populateTables.zip"
      Timeout: 60

  RunPopulateTables:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - CustomersTable
      - AccountsTable
      - TransactionsTable
    Properties:
      ServiceToken:
        Fn::GetAtt: [ PopulateTables , "Arn" ]

  EmptyTables:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: nodejs18.x
      Code:
        S3Bucket: projectkitty
        S3Key: "emptyTables.zip"
      Timeout: 60

  GetCustomersLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: michaelpotocar.projectkitty.providers.GetCustomersProvider::handleRequest
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: java11
      Code:
        S3Bucket: projectkitty
        S3Key: "lambda-1.0-SNAPSHOT.zip"
      MemorySize: 256
      Timeout: 60

  GetCustomersPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: GetCustomersLambda
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"

  getAccountsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: michaelpotocar.projectkitty.providers.GetAccountsProvider::handleRequest
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: java11
      Code:
        S3Bucket: projectkitty
        S3Key: "lambda-1.0-SNAPSHOT.zip"
      MemorySize: 256
      Timeout: 60

  getAccountsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: getAccountsLambda
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"

  GetTransactionsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: michaelpotocar.projectkitty.providers.GetTransactionsProvider::handleRequest
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: java11
      Code:
        S3Bucket: projectkitty
        S3Key: "lambda-1.0-SNAPSHOT.zip"
      MemorySize: 256
      Timeout: 60

  GetTransactionsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: GetTransactionsLambda
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: ApiGateway
      StageName: prod

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ProjectKitty
      Body:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: s3://projectkitty/swagger.yaml
