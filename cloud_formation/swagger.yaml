---
swagger: "2.0"
info:
  title: "ProjectKitty"
paths:
  /customers:
    get:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub:
            "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCustomersLambda}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "aws"
  /customers/{customerId}:
    get:
      consumes:
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub:
            "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCustomerLambda}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n    \"customerId\": \"$input.params('customerId')\"\
            \n}"
        passthroughBehavior: "when_no_match"
        type: "aws"
  /customers/{customerId}/accounts:
    get:
      consumes:
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub:
            "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCustomerAccountsLambda}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n    \"customerId\": \"$input.params('customerId')\"\
            \n}"
        passthroughBehavior: "when_no_match"
        type: "aws"
    post:
      consumes:
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub:
            "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostCreateAccountLambda}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n    \"customerId\": \"$input.params('customerId')\"\
            ,\n    \"type\": $input.json('$.type'),\n    \"nickname\": $input.json('$.nickname'),\n\
            \    \"accountNumber\": $input.json('$.accountNumber'),\n    \"routingNumber\"\
            : $input.json('$.routingNumber'),\n    \"creditLimit\": $input.json('$.creditLimit')\n\
            }"
        passthroughBehavior: "when_no_templates"
        type: "aws"
    options:
      consumes:
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /customers/{customerId}/accounts/{accountId}:
    get:
      consumes:
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        required: true
        type: "string"
      - name: "accountId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub:
            "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCustomerAccountLambda}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n    \"customerId\": \"$input.params('customerId')\"\
            ,\n    \"accountId\": \"$input.params('accountId')\"\n}"
        passthroughBehavior: "when_no_templates"
        type: "aws"
  /customers/{customerId}/accounts/{accountId}/transactions:
    get:
      consumes:
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        required: true
        type: "string"
      - name: "accountId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub:
            "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAccountTransactionsLambda}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n    \"customerId\": \"$input.params('customerId')\"\
            ,\n    \"accountId\": \"$input.params('accountId')\"\n}"
        passthroughBehavior: "when_no_templates"
        type: "aws"
  /customers/{customerId}/transfer:
    post:
      consumes:
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub:
            "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostTransferLambda}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n    \"customerId\": \"$input.params('customerId')\"\
            ,\n    \"type\": $input.json('$.type'),\n    \"fundingAccountId\": $input.json('$.fundingAccountId'),\n\
            \    \"targetAccountId\": $input.json('$.targetAccountId'),\n    \"targetContactId\"\
            : $input.json('$.targetContactId'),\n    \"amount\": $input.json('$.amount'),\n\
            \    \"memo\": $input.json('$.memo')\n}"
        passthroughBehavior: "when_no_templates"
        type: "aws"
    options:
      consumes:
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /customers/{customerId}/p2p:
    get:
      consumes:
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub:
            "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPendingPeerToPeerTransfersLambda}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n    \"customerId\": \"$input.params('customerId')\"\
            \n}"
        passthroughBehavior: "when_no_templates"
        type: "aws"
  /customers/{customerId}/p2p/{paymentId}:
    put:
      consumes:
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        required: true
        type: "string"
      - name: "paymentId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub:
            "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutPendingPeerToPeerTransferLambda}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n    \"customerId\": \"$input.params('customerId')\"\
            ,\n    \"paymentId\": \"$input.params('paymentId')\",\n    \"targetAccountId\"\
            : $input.json('$.targetAccountId')\n}\n\n"
        passthroughBehavior: "when_no_templates"
        type: "aws"
    options:
      consumes:
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        required: true
        type: "string"
      - name: "paymentId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
